# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  workflow_dispatch:
  push:
    branches: [ master, dev ]
  pull_request:
  schedule:
    - cron: "0 6 10 * *"

name: R Build and Checks

jobs:
  R-CMD-check:
    runs-on: ubuntu-${{ matrix.config.os }}

    name: ubuntu-${{ matrix.config.os }} (${{ matrix.config.r }} / ${{ matrix.config.bioc }})

    strategy:
      fail-fast: false
      matrix:
        config:
          #- { os: 24.04, r: 'devel', bioc: '3.21' } # Bioc 3.21 (devel) requires R 4.5
          - { os: 24.04, r: '4.4', bioc: '3.20', pkgdown: "true" }

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.R_LIBS_USER }}
            ~/.cache/pip

          key: ${{ format('{0}-{1}-{2}-{3}-{4}', runner.os, matrix.config.r, matrix.config.bioc, secrets.CACHE_VERSION || 1, hashFiles(format('{0}/.github/pkg.lock', inputs.working-directory ))) }}
          restore-keys: ${{ format('{0}-{1}-{2}-{3}-', runner.os, matrix.config.r, matrix.config.bioc, secrets.CACHE_VERSION || 1 ) }}


      # libharfbuzz-dev libfribidi-dev are added to fix textshaping install error
      # libhdf5-dev added for cellmembrane/SeuratDisk
      # libglpk-dev added due to igraph / bluster /scran error
      # NOTE: added numpy<2 to side-step a numpy version issue. This should be removed eventually. See: https://github.com/numpy/numpy/issues/26710
      # NOTE: libsodium-dev installed for VISION
      - name: Install apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: |
            libharfbuzz-dev libfribidi-dev python3 python3-pip libsodium-dev libcurl4-openssl-dev libglpk-dev libhdf5-dev libmagick++-dev libharfbuzz-dev libfribidi-dev libsodium-dev libcurl4-openssl-dev python3 python3-pip
            texlive-latex-base texlive-fonts-recommended texlive-fonts-extra texlive-latex-extra
          version: ${{ secrets.CACHE_VERSION || 1 }}

      - uses: actions/setup-python@v5
        with:
          python-version: '>=3.9'
          cache: 'pip'
      - run: pip install wheel setuptools "numpy<2.0.0" scanpy umap-learn phate sctour tcrdist3 scikit-misc leidenalg

      - name: Setup CoNGA
        run: |
          cd ../
          git clone https://github.com/phbradley/conga.git conga
          cd conga/tcrdist_cpp  
          make
          cd ../../
          pip3 install -e conga
          cd CellMembrane

      - name: Setup SDA
        run: |
          SDA_PATH=/home/runner/work/sda
          mkdir $SDA_PATH
          wget -q -O $SDA_PATH/sda_static_linux https://www.dropbox.com/sh/chek4jkr28qnbrj/AADPy1qQlm3jsHPmPdNsjSx2a/bin/sda_static_linux?dl=1
          chmod +x $SDA_PATH/sda_static_linux          
          echo /home/runner/work/sda >> $GITHUB_PATH

      # Note: the environment variable R_BIOC_VERSION is set to force remotes::install_bioc to follow the proper version
      - name: Setup Bioconductor
        run: |
          if (!requireNamespace("BiocManager", quietly=TRUE))  install.packages("BiocManager");
          BiocManager::install(version = "${{ matrix.config.bioc }}", ask = FALSE);
          cat(append = TRUE, file = "~/.Rprofile", "options(repos = BiocManager::repositories());")
          cat(append = TRUE, file = "~/.Rprofile", "Sys.setenv(R_BIOC_VERSION=as.character(BiocManager::version()));");
        shell: Rscript {0}


      - name: Perform custom installs
        run: |
          install.packages('remotes')
          # NOTE: fgsea added to avoid BH issue: https://github.com/ctlab/fgsea/issues/165
          remotes::install_github("ctlab/fgsea")
        shell: Rscript {0}

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: ${{ secrets.CACHE_VERSION || 1 }}
          upgrade: 'TRUE'
          extra-packages: |
            any::pkgdown
            any::rcmdcheck
            any::remotes
            any::devtools

#      # The install_github() on remotes is to ensure system_requirements() supports 22.04
#      - name: Install r-lib/remotes
#        run: |
#          remotes::install_github("r-lib/remotes", force = TRUE)
#          print(paste0("Remotes version: ", packageVersion("remotes")))
#        shell: Rscript {0}

#      - name: Install R system dependencies
#        run: |
#          while read -r cmd
#          do
#            eval sudo $cmd
#          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "${{ matrix.config.os }}"))')

      - uses: actions/cache/save@v4
        id: cache
        with:
          path: |
            ${{ env.R_LIBS_USER }}
          key: ${{ format('{0}-{1}-{2}-{3}-{4}', runner.os, matrix.config.r, matrix.config.bioc, secrets.CACHE_VERSION || 1, hashFiles(format('{0}/.github/pkg.lock', inputs.working-directory ))) }}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Verify SDA
        run: |        
          which sda_static_linux

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-bioc${{ matrix.config.bioc }}-results
          path: check

      - name: Install package
        if: github.ref == 'refs/heads/master' && matrix.config.pkgdown == 'true'
        run: R CMD INSTALL .

      - name: Deploy package
        if: github.ref == 'refs/heads/master' && matrix.config.pkgdown == 'true'
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          Rscript -e 'pkgdown::deploy_to_branch(new_process = FALSE, clean = TRUE)'
